{
  "ver": "1.0.15",
  "uuid": "59b93610-4778-412f-baae-1c085030ef46",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n    mat4 mvp;\n\n    #if _USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n\n    v_color = a_color;\n\n    gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying lowp vec4 v_color;\nuniform lowp float u_edge;\n\nvoid main () {\n    vec4 color = v_color;\n\n    #if USE_TEXTURE\n        color *= texture2D(texture, v_uv0);\n        #if _USE_ETC1_TEXTURE\n        color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n        #endif\n    #endif\n\n    ALPHA_TEST(color);\n\n    float edge = u_edge;\n    vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n    float rx = abs(uv.x) - (0.5 - edge);\n    float ry = abs(uv.y) - (0.5 - edge);\n    float mx = step(0.5 - edge, abs(uv.x));\n    float my = step(0.5 - edge, abs(uv.y));\n    float a = 1.0 - mx * my  * step(edge, length(vec2(rx, ry)));\n    gl_FragColor = vec4(color.rgb, color.a * a);\n}\n\n\n"
    }
  ],
  "subMetas": {}
}